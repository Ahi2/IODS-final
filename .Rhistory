math <- read.table("C:/Data/IODS-final/student-mat.csv", sep=";", header=TRUE)
por <- read.table("C:/Data/IODS-final/student-por.csv", sep=";", header=TRUE)
math <- read.table("C:/Data/IODS-final/student-mat.csv", sep=";", header=TRUE)
por <- read.table("C:/Data/IODS-final/student-por.csv", sep=";", header=TRUE)
dim(math)
str(math)
dim(por)
str(por)
dim(por)
str(por)
library(dplyr)
library(dplyr)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
colnames(math_por)
glimpse(math_por)
fam <- select(math_por, one_of("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
two_columns <-  select(math_por, starts_with(column_name))
first_column <- select(two_columns, 1)[[1]]
if(is.numeric(first_column)) {
fam[column_name] <- round(rowMeans(two_columns))
} else {
fam[column_name] <- (first_column)
}
}
glimpse(fam)
write.csv(fam, file = "C:/Data/IODS-final/alc.csv", row.names = TRUE)
write.csv(math_por, file = "C:/Data/IODS-final/math_por.csv", row.names = TRUE)
write.csv(fam, file = "C:/Data/IODS-final/fam.csv", row.names = TRUE)
write.csv(math_por, file = "C:/Data/IODS-final/math_por.csv", row.names = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
fam <- read.table("C:/Data/IODS-final/fam.csv", sep=",", header=TRUE)
library(GGally)
library(GGally)
library(GGally)
colnames(fam)
p <- ggpairs(fam, mapping = aes (col = sex, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
gather(fam) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free" )+ geom_bar()
glimpse(fam)
gather(fam) %>% glimpse
gather(fam) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free" )+ geom_bar()
p <- ggpairs(fam, mapping = aes (col = sex, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
pairs(fam)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd)
dim(hd)
summary(hd)
str(gii)
dim(gii)
summary(gii)
colnames(hd)
colnames(hd)[1,2,3,4,5,6,7,8] <- "HDI.rank", "Country", "HDI", "Life.Exp", "Edu.Exp", "Edu.Mean", "GNI", "GNI.rank"
?colnames
colnames(hd)[1,2,3,4,5,6,7,8] <- c("HDI.rank", "Country", "HDI", "Life.Exp", "Edu.Exp", "Edu.Mean", "GNI", "GNI.rank")
colnames(hd) <- c("HDI.rank", "Country", "HDI", "Life.Exp", "Edu.Exp", "Edu.Mean", "GNI", "GNI.rank")
colnames(hd)
colnames(hd)
colnames(gii)
colnames(gii) <- c("GII.Rank", "Country", "GII", "Mat.Mor", "Ado.Birth", "Parli.F", "Edu2.F", "Edu2.M", "Labo.F", "Labo.M")
colnames(gii)
gii <- mutate(gii, Edu2.FM = Edu2.F/Edu2.M)
gii<- mutate(gii, Labo.FM = Labo.F/Labo.M)
join_by <- c("Country")
human2 <- inner_join(hd, gii, by = join_by, suffix = c(".hd", ".gii"))
dim(human2)
colnames(human2)
str_replace(human2$GNI, pattern = ",", replace = "") %>% as.numeric(human2$GNI)
library(stringr)
str_replace(human2$GNI, pattern = ",", replace = "") %>% as.numeric(human2$GNI)
str(human2)
str_replace(human2$GNI, pattern = ",", replace = "") %>% as.numeric(human2$GNI)
str(human2)
str_replace(human2$GNI, pattern = ",", replace = ".") %>% as.numeric(human2$GNI)
str(human2)
str_replace(human2$GNI, pattern = ",", replace = "") %>% as.numeric(human2$GNI)
human2 <-  mutate(human2, GNI = as.numeric(GNI))
human2 <-  mutate(human2, GNI = as.numeric(human2$GNI))
str(human2)
str_replace(human2$GNI, pattern = ",", replace = "") %>% as.numeric(human2$GNI)
str_replace(human2$GNI, pattern = ",", replace = ".") %>% as.numeric(human2$GNI)
library(GGally)
GNI = as.numeric(human2$GNI)
str(human2)
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human2 <- select(human2, one_of(keep))
complete.cases(human)
data.frame(human[-1], comp = complete.cases(human))
str_replace(human2$GNI, pattern = ",", replace = "") %>% as.numeric(human2$GNI)
complete.cases(human2)
data.frame(human2[-1], comp = complete.cases(human))
complete.cases(human2)
data.frame(human2[-1], comp = complete.cases(human2))
human2_ <- filter(human2, complete.cases(human2))
dim(human2_)
str_replace(human2$GNI, pattern = ",", replace = "") %>% as.numeric(human2$GNI)
# Let us now exclude unneeded variabes, keeing only the following columns in the code
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human2 <- select(human2, one_of(keep))
# Now we remove all rows with missing values
complete.cases(human2)
data.frame(human2[-1], comp = complete.cases(human2))
# filtering out all rows with NA values
human2_ <- filter(human2, complete.cases(human2))
dim(human2_)
dim(human2)
dim(human2_)
str(human2$GNI)
str_replace(human2$GNI, pattern = ",", replace = "") %>% as.numeric(human2$GNI)
human2 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human2.txt", sep  =",", header = T)
str(human2)
dim(human2)
summary(human2)
ggpairs(human2)
cor(human2) %>% corrplot
library(corrplot)
library(corrplot)
cor(human2) %>% corrplot
cor(human2) %>% corrplot
cor(human2) %>% corrplot
my_model <- lm(GNI ~ Life.Exp, data = human2)
summary(my_model)
qplot(Life.Exp, GNI, data = human2) + geom_smooth(method = "lm")
my_model <- lm(Life.Exp ~ GNI, data = human2)
summary(my_model)
qplot(GNI, Life.Exp, data = human2) + geom_smooth(method = "lm")
my_model2 <- lm(Life.Exp ~ GNI + Mat.Mor + Ado.Birth, data = human2)
summary(my_model2)
par(mfrow = c(2,2))
plot(my_model2, which = c(1,2,5))
my_model2 <- lm(Life.Exp ~ GNI + Mat.Mor, data = human2)
summary(my_model2)
par(mfrow = c(2,2))
plot(my_model2, which = c(1,2,5))
human2 <- filter(human2, GNI < 80000)
qplot(GNI, Life.Exp, data = human2) + geom_smooth(method = "lm")
my_model <- lm(Life.Exp ~ GNI, data = human2)
summary(my_model)
my_model2 <- lm(Life.Exp ~ GNI + Mat.Mor, data = human2)
summary(my_model2)
par(mfrow = c(2,2))
plot(my_model2, which = c(1,2,5))
human2_scaled <- scale(human2)
summary(human2_scaled)
class(human2_scaled)
human2_scaled <- as.data.frame(human2_scaled)
summary(human2_scaled$GNI)
bins <- quantile(human2_scaled$GNI)
bins
GNI_class <- cut(human2_scaled$GNI, breaks = bins, include.lowest = TRUE, c(label = "low", "med_low", "med_high", "high"))
table(GNI_class)
library(mass)
library(MASS)
human2_scaled <- dplyr::select(humans2_scaled, -GNI)
human2_scaled <- dplyr::select(human2_scaled, -GNI)
human2_scaled <- data.frame(human2_scaled, GNI_class)
summary(human2_scaled)
n <- nrow(human2_scaled)
n
ind <- sample(n, size = n * 0.8)
train <- human2_scaled[ind,]
test <- human2_scaled[-ind,]
correct_classes <- test$GNI_class
test <- dplyr::select(test, -GNI_class)
lda.fit <- lda(GNI_class ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$GNI_class)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
human2 <- filter(human2, GNI < 75000)
human2 <- filter(human2, GNI < 8000)
human2 <- filter(human2, GNI < 80000)
qplot(GNI, Life.Exp, data = human2) + geom_smooth(method = "lm")
library(tidyr)
library(dplyr)
library(ggplot2)
library(GGally)
library(corrplot)
library(MASS)
library(MASS)
library(MASS)
library(corrplot)
library(tidyr)
library(dplyr)
library(ggplot2)
library(GGally)
library(corrplot)
library(MASS)
qplot(GNI, Life.Exp, data = human2) + geom_smooth(method = "lm")
qplot(GNI, Life.Exp, data = human2) + geom_smooth(method = "lm")
qplot(GNI, Life.Exp, data = human2) + geom_smooth(method = "lm")
human2 <- filter(human2, GNI < 75000)
qplot(GNI, Life.Exp, data = human2) + geom_smooth(method = "lm")
my_model <- lm(Life.Exp ~ GNI, data = human2)
summary(my_model)
par(mfrow = c(2,2))
plot(my_model2, which = c(1,2,5))
human2_scaled <- dplyr::select(human2_scaled, -GNI)
class(human2_scaled)
human2_scaled <- as.data.frame(human2_scaled)
human2_scaled <- dplyr::select(human2_scaled, -GNI)
GNI_class <- cut(human2_scaled$GNI, breaks = bins, include.lowest = TRUE, c(label = "low", "med_low", "med_high", "high"))
bins <- quantile(human2_scaled$GNI)
human2_scaled <- scale(human2)
summary(human2_scaled)
class(human2_scaled)
human2_scaled <- as.data.frame(human2_scaled)
summary(human2_scaled$GNI)
bins <- quantile(human2_scaled$GNI)
bins
GNI_class <- cut(human2_scaled$GNI, breaks = bins, include.lowest = TRUE, c(label = "low", "med_low", "med_high", "high"))
table(GNI_class)
human2_scaled <- dplyr::select(human2_scaled, -GNI)
